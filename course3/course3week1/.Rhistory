install.packages("slidify")
install.packages("ggplot2")
install.packages("KernSmooth")
library(KernSmooth)
library(Rtools)
pwd
pwd
ls
cd C:
pwd
library(Rtools)
library(devtools)
library(devtools)
exit
bye
exit()
logout
gnome-session-quit
q
quit
quit("yes")
pwd
q()
x,- 1:10
x <- 1:10
if(x > 5) { x<-0 }
q()
f <- function (x) g<-function(y){y+z} z<-4 x+ g(x)}
exit()
exit
quot
quit
quit(save = "default", status = 0, runLast = TRUE)
install.packages("swirl")
library(swirl)
ls()
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/makecachematrix.R')
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/makecachematrix.R')
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/makecachematrix.R')
x=matrix(1:9,cols=3,rows-3)
x=matrix(c(1:9),nrow=3,ncol=3)
x
makeCacheMatrix(x)
makeCacheMatrix()x
makeCacheMatri(x)$inverse
makeCacheMatrix$inverse(x)
makeCacheMatrix$inverse
makeCacheMatrix(x)
makeCacheMatrix(x)$set
makeCacheMatrix(x)$getinv
makeCacheMatrix(x)$inverse_var
makeCacheMatrix(x)$inverse
makeCacheMatrix(x)$y
cacheSolve(x)
x
temp=makeCacheMatrix(x)
cacheSolve(temp)
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/temp.R')
cacheSolve(temp)
mat=c(4,3)
mat=rbind(mat,c(3,2))
mat
temp=makeCacheMatrix(mat)
cacheSolve(temp)
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/makecachematrix.R')
temp=makeCacheMatrix(mat)
cacheSolve(temp)
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/makecachematrix.R')
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/makecachematrix.R')
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/makecachematrix.R')
source('C:/Users/Rph/Desktop/HigherStudies/homework/datasciencecoursera/makecachematrix.R')
ls
ls("Global Environment")
ls.str()
library(XML)
install("XML")
install.packages("XML")
library(XML)
setwd(dir = "C:/Users/Rph/Desktop/HigherStudies/homework/Course3 ")
dfr=read.table(getdata-data-DATA.gov_NGAP.csv, header=TRUE, sep=",")
dfr=read.table(getdata-data-DATA.gov_NGAP.csv, header=TRUE, sep=",")
listds()
filename="getdata-data-DATA.gov_NGAP.csv"
dfr=read.table(filename, header=TRUE, sep=",")
list.files()
dfr=read.table(getdata\-data\-DATA.gov\_NGAP.csv, header=TRUE, sep=",")
dfr=read.table(getdatadataDATA.govNGAP, header=TRUE, sep=",")
dfr=read.table(getdatadataDATA.govNGAP.xlsx, header=TRUE, sep=",")
list.files()
dfr=read.table("getdatadataDATA.govNGAP.xlsx", header=TRUE, sep=",")
dfr=read.table("getdatadataDATA.govNGAP.xlsx", sep=",")
dfr=read.table("getdatadataDATA.govNGAP.xlsx")
dfr
dfr=read.table("getdatadataDATA.govNGAP.csv")
dfr=read.csv("getdatadataDATA.govNGAP.csv")
dfr
dfr[18:23]
dfr[18:23,7:15]
small_dfr=dfr[18:23,7:15]
dat=dfr[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xml=htmlTreeParse(url,useInternal=TRUE)
install.packages('XML')
library(XML)
xml=htmlTreeParse(url,useInternal=TRUE)
xml
xml=htmlTreeParse(url,useInternal=TRUE)xpathSApply(gethelp.df, "//span[@class='local-date']", xmlValue)xpathSApply(gethelp.df, "//span[@class='local-date']", xmlValue)
zip=xpathSApply(xml, "//li[@class='zipcode'", xmlValue)
zip=xpathSApply(xml, "//zipcode'", xmlValue)
xml=xmlTreeParse(url,useInternal=TRUE)
xml=xmlTreeParse(url,useInternal=TRUE)
rootnode<-xmlRoot(xml)
xmlName(rootnode)
rootnode[[1]]
rootnode[[2]]
rootnode[[3]]
xml=xmlTreeParse(url)
temp <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", ssl.verifyPeer=FALSE)
temp <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", ssl.verifyPeer=FALSE)temp <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", ssl.verifyPeer=FALSE)temp <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", ssl.verifyPeer=FALSE)
install.packages("RCurl")
library(RCurl)
temp <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", ssl.verifyPeer=FALSE)
df=xmlTreeParse(temp,useInternal = TRUE)
df
rootnode<-xmlRoot(xml)
rootnode<-xmlRoot(df)
rootnode
rootnode[[1]]
rootnode[[1,2]]
xpathSApply(rootnode,"//zipcode")
xpathSApply(rootnode,"//zipcode",XmlValue)
xpathSApply(rootnode,"//zipcode",xmlValue)
c(xpathSApply(rootnode,"//zipcode",xmlValue))
zip=c(xpathSApply(rootnode,"//zipcode",xmlValue))
list(zip)
zip$21231
length(list)
list(1:10)
strzip)
str(zip)
help(str)
ls.str(zip)
str(zip).object
str(zip,max.level)
x=c(1,2,3)
str(x)
x<- c(4,23,4,23,5,43,54,56,657,67,67,435)
str(x)
table(zip)
pwd
list.files()
fread("getdata-data-ss06pid.csv")
library(data)
library(data.table)
library(table)
install.packages(data.table)
install.packages("data.table")
fread("getdata-data-ss06pid.csv")
library(data.table)
fread("getdata-data-ss06pid.csv")
tab=fread("getdata-data-ss06pid.csv")
DT=fread("getdata-data-ss06pid.csv")
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time((mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time((mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$p)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
proc.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
help(system.time)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
q()
